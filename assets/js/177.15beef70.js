(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{678:function(n,e,a){"use strict";a.r(e);var l=a(21),h=Object(l.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"channelpipeline和channelhandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelpipeline和channelhandler"}},[n._v("#")]),n._v(" ChannelPipeline和ChannelHandler")]),n._v(" "),a("p",[n._v("ChannelPipeline是对Channel的封装，ChannelPipeline持有时间拦截器ChannelHandler的链表，由ChannelHandler对I/O事件拦截和处理，可以通过新增和删除ChannelHandler来实现不同业务的逻辑定制。")]),n._v(" "),a("h2",{attrs:{id:"_17-1-channelpipeline的功能说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-1-channelpipeline的功能说明"}},[n._v("#")]),n._v(" 17.1 ChannelPipeline的功能说明")]),n._v(" "),a("p",[n._v("ChannelPipeline是ChannelHandler的容器，负责ChannelHandler的管理和事件拦截\n"),a("strong",[n._v("17.1.1 ChannelPipeline的事件处理")]),n._v("\nNetty中的事件分为inbound和outbound事件\ninbound事件通常由IO线程触发，如tcp连接建立、断开、异常通知等\noutbound事件通常是由用户主动发起的网络IO操作，如用户发起的绑定本地地址，发送消息等\n"),a("strong",[n._v("17.1.2 自定义拦截器")]),n._v("\n通常ChannelHandler只需要继承ChannelHandlerAdapter类覆盖自己关心的方法即可。\n"),a("strong",[n._v("17.1.3 ChannelPipeline的主要特性")]),n._v("\nChannelPipeline支持动态添加或者删除ChannelHandler。使用场景（业务高峰期加入拥塞保护ChannelHandler，高峰过后删掉ChannelHandler）。\nChannelPipeline是线程安全的，但是ChannelHandler不是线程安全的。")]),n._v(" "),a("h2",{attrs:{id:"_17-1-channelpipeline源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-1-channelpipeline源码"}},[n._v("#")]),n._v(" 17.1 ChannelPipeline源码")]),n._v(" "),a("p",[n._v("实际上是ChannelHandler 的容器，内部维护了一个ChannelHandler链表和迭代器。")])])}),[],!1,null,null,null);e.default=h.exports}}]);