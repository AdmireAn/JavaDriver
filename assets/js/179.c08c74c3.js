(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{681:function(a,e,s){"use strict";s.r(e);var n=s(21),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("@"),s("a",{attrs:{href:"%E7%9B%AE%E5%BD%95"}},[a._v("TOC")])]),a._v(" "),s("h1",{attrs:{id:"第一章-io介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一章-io介绍"}},[a._v("#")]),a._v(" 第一章 IO介绍")]),a._v(" "),s("h2",{attrs:{id:"_1-1-io概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-io概念"}},[a._v("#")]),a._v(" 1.1 IO概念")]),a._v(" "),s("h3",{attrs:{id:"_1-1-1-buffer-handler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-buffer-handler"}},[a._v("#")]),a._v(" 1.1.1 Buffer Handler")]),a._v(" "),s("p",[a._v("内存分为用户空间（User space），内核空间（Kernel space）。\n用户空间的数据读写需要通过内存空间传递。\n如下图所示，用户需要读数据，则向cpu发送一个读请求，cpu相应这个请求控制disk controller从disk读取数据到内核buffer，然后再把内核buffer的数据推送给用户空间的buffer。\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cDovL3d3My5zaW5haW1nLmNuL2xhcmdlLzAwNnk4bU42bHkxZzY4c3Rpa2dlbWozMG5hMDlzd2dyLmpwZw?x-oss-process=image/format,png",alt:""}}),a._v("\n为什么要区分用户空间和内核空间呢？\n每个进程有独立的内存空间好处在于多个进程的内存分配互不影响。如果多个进程共享一块内存，那么内存分配的时候就得排队。")]),a._v(" "),s("p",[a._v("为什么用户空间不能直接从disk读数据呢？")]),a._v(" "),s("ul",[s("li",[a._v("硬件控制器只能处理固定大小的数据，用户空间需要的可能是数据块大小异常或者不对齐的数据，内核空间起作到数拆分、重组的作用。")]),a._v(" "),s("li",[a._v("硬件设备通常不允许直接操作虚拟内存，即用户空间")])]),a._v(" "),s("p",[a._v("DMA是什么？\nDMA(Direct Memory Access,直接存储器访问)。\n在DMA之前通过中断CPU来传输数据。CPU响应中断，控制总线传输数据。\nDMA不需要CPU参与数据传输。DMA可以和CPU交互请求控制总线传输数据。")]),a._v(" "),s("h3",{attrs:{id:"_1-1-1-scatter-gather"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-scatter-gather"}},[a._v("#")]),a._v(" 1.1.1 scatter/gather")]),a._v(" "),s("p",[a._v("分散（scatter）从Channel中读取是指在读操作时将读取的数据写入多个buffer中。因此，Channel将从Channel中读取的数据“分散（scatter）”到多个Buffer中。\n聚集（gather）写入Channel是指在写操作时将多个buffer的数据写入同一个Channel，因此，Channel 将多个Buffer中的数据“聚集（gather）”后发送到Channel。")]),a._v(" "),s("p",[a._v("比如某个协议的消息固定消息头128字节，消息体1024字节，消息尾128字节。我们想要分别处理消息头，消息体，消息尾。\n使用scatter示例代码:")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ByteBuffer header = ByteBuffer.allocate(128);\nByteBuffer body   = ByteBuffer.allocate(1024);\nByteBuffer tail   = ByteBuffer.allocate(128);\n\nByteBuffer[] bufferArray = { header, body,tail };\nchannel.read(bufferArray);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNnk4bU42bHkxZzY4dDMzaWZqcWozMHFrMGJ5dGM5LmpwZw?x-oss-process=image/format,png",alt:""}}),a._v("\n注意buffer首先被插入到数组，然后再将数组作为channel.read() 的输入参数。read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写。\n所以。")]),a._v(" "),s("p",[a._v("scatter不适合处理动态消息，相反，gather适合处理动态消息。\nbuffers数组是write()方法的入参，write()方法会按照buffer在数组中的顺序，将数据写入到channel，注意只有position和limit之间的数据才会被写入。因此，如果一个buffer的容量为128byte，但是仅仅包含58byte的数据，那么这58byte的数据将被写入到channel中。因此与Scattering Reads相反，Gathering Writes能较好的处理动态消息。")]),a._v(" "),s("h3",{attrs:{id:"_1-1-2-虚拟内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-虚拟内存"}},[a._v("#")]),a._v(" 1.1.2 虚拟内存")]),a._v(" "),s("p",[a._v("虚拟内存是指使用虚拟内存地址代替物理内存地址。")]),a._v(" "),s("ul",[s("li",[a._v("会有多个虚拟内存指向同一个物理内存")]),a._v(" "),s("li",[a._v("虚拟内存可能会大于物理内存\n上面说disk controller不可以直接把数据读到用户空间。虚拟内存可以通过虚拟地址映射内核空间的方式做到这一点。\n如下图，内核空间的buffer对用户空间也是可见的。这就是netty零拷贝的原理，这减少了buffer在用户空间和内核空间的拷贝，非常有意义。\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cDovL3d3Mi5zaW5haW1nLmNuL2xhcmdlLzAwNnk4bU42bHkxZzY4dHR4cDg3a2ozMG5nMGJjNDF2LmpwZw?x-oss-process=image/format,png",alt:""}})])]),a._v(" "),s("h3",{attrs:{id:"_1-1-3-内存页"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-内存页"}},[a._v("#")]),a._v(" 1.1.3 内存页")]),a._v(" "),s("p",[a._v("操作系统将内存按固定字节分页。\n内存读取的基本单位是页。")]),a._v(" "),s("p",[a._v("MMU(Memory Management Unit):内存管理单元，保存虚拟内存和物理内存的映射关系，处在CPU和内存之间，起到将虚拟内存转换为物理内存的作用。")]),a._v(" "),s("h3",{attrs:{id:"_1-1-4-文件io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-4-文件io"}},[a._v("#")]),a._v(" 1.1.4 文件IO")]),a._v(" "),s("p",[a._v("文件系统：文件IO发生在文件系统。文件保存在磁盘，磁盘扇区类似内存分页的概念。内存文件读取通过文件系统间接操作磁盘文件。\n文件零拷贝如下图。避免了文件系统内存页和用户内存页之间的拷贝。\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cDovL3d3My5zaW5haW1nLmNuL2xhcmdlLzAwNnk4bU42bHkxZzZiNWM0NWtuemozMHJrMGQ2ZGtuLmpwZw?x-oss-process=image/format,png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"_1-1-5-io流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-5-io流"}},[a._v("#")]),a._v(" 1.1.5 IO流")]),a._v(" "),s("p",[a._v("上面说的IO都是面向块的IO。还有面向流的IO。\n大多数操作系统支持将流置为非阻塞模式，额外设置一个进程用于检查流上是否有输入，因此流本身是不被阻塞的。\n网络IO一般都是流IO。\n多路复用：用一个进程管理多个非阻塞IO流的状态。")]),a._v(" "),s("h1",{attrs:{id:"第二章-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二章-buffer"}},[a._v("#")]),a._v(" 第二章 Buffer")]),a._v(" "),s("p",[a._v("标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。")]),a._v(" "),s("h2",{attrs:{id:"_2-1-buffer-basic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-buffer-basic"}},[a._v("#")]),a._v(" 2.1 Buffer Basic")]),a._v(" "),s("h3",{attrs:{id:"_2-1-1-buffer的几个属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-buffer的几个属性"}},[a._v("#")]),a._v(" 2.1.1 Buffer的几个属性")]),a._v(" "),s("ul",[s("li",[a._v("capacity")]),a._v(" "),s("li",[a._v("limit")]),a._v(" "),s("li",[a._v("position")]),a._v(" "),s("li",[a._v("mark\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNnk4bU42bHkxZzZiNXoyYWFtYmozMG5jMDk0Z25sLmpwZw?x-oss-process=image/format,png",alt:""}})])]),a._v(" "),s("h3",{attrs:{id:"_2-1-2-buffer-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-buffer-api"}},[a._v("#")]),a._v(" 2.1.2 Buffer API")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("package java.nio;\npublic abstract class Buffer {\npublic final int capacity()\npublic final int position()\npublic final Buffer position (int newPosition) public final int limit()\n  }\npublic final Buffer limit (int newLimit)\npublic final Buffer mark()\npublic final Buffer reset()\npublic final Buffer clear()\npublic final Buffer flip()\npublic final Buffer rewind()\npublic final int remaining()\npublic final boolean hasRemaining()\npublic abstract boolean isReadOnly();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("h3",{attrs:{id:"_2-1-3-访问buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-访问buffer"}},[a._v("#")]),a._v(" 2.1.3 访问Buffer")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class ByteBuffer\n       extends Buffer implements Comparable\n {\n// This is a partial API listing\npublic abstract byte get();\npublic abstract byte get (int index);\npublic abstract ByteBuffer put (byte b);\npublic abstract ByteBuffer put (int index, byte b);\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("h3",{attrs:{id:"_2-1-4-write"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-write"}},[a._v("#")]),a._v(" 2.1.4 write")]),a._v(" "),s("p",[a._v("Figure 2-2的buffer经过下面这个代码会变成Figure 2-3的样子：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("buffer.put((byte)'H').put((byte)'e').put((byte)'l')\n.put((byte)'l').put( (byte)'o');\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAwN29rZnY4ajMwbDgwOHlnbzMuanBn?x-oss-process=image/format,png",alt:""}}),a._v("\n也可以按绝对位置写入：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("buffer.put(0, (byte)'M').put((byte)'w');\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAwYm52cWhwajMwbGUwOHFxNWguanBn?x-oss-process=image/format,png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"_2-1-5-flipping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-flipping"}},[a._v("#")]),a._v(" 2.1.5 Flipping")]),a._v(" "),s("p",[a._v("当我们想要写出buffer的内容时，我们需要用position和limit指针指向时机内容的起始位置。类似这样：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("buffer.limit(buffer.position()).position(0);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("这等同于buffer.flip();\n调用flip()后2-4会变成2-5\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAwcGFsaDRoajMwbG0wOTQwdjkuanBn?x-oss-process=image/format,png",alt:""}}),a._v("\n说白了，flip()改变position和limit两个指针。\nrewind()只改变position指针，等同于：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("buffer.position(0);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"_2-1-6-draining"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-6-draining"}},[a._v("#")]),a._v(" 2.1.6 Draining")]),a._v(" "),s("p",[a._v("hasRemaining()可以判断是否到达limit指针\n下面是一个实现，将buffer内容读到一个数组中")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (int i = 0; buffer.hasRemaining(), i++) {\n       myByteArray [i] = buffer.get();\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("remaining()会返回position到limit的数量。\n将buffer内容读到一个数组中另一种实现方式：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("int count = buffer.remaining();\nfor (int i = 0; i < count, i++) {\n       myByteArray [i] = buffer.get();\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("h3",{attrs:{id:"_2-1-7-compacting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-7-compacting"}},[a._v("#")]),a._v(" 2.1.7 Compacting")]),a._v(" "),s("p",[a._v("当你drain一部分数据想要继续fill数据的时候，你需要把还未drain的数据整体前移。\nbuffer.compact()；可以完成这个工作。\n调用buffer.compact()的效果就是2-6到2-7\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAxZjRnb3hkajMwbGMwOHNhY2suanBn?x-oss-process=image/format,png",alt:""}}),a._v(" "),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAxZmRsNmJoajMwbjIwOG9kaWcuanBn?x-oss-process=image/format,png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"_2-1-9-mark"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-9-mark"}},[a._v("#")]),a._v(" 2.1.9 Mark")]),a._v(" "),s("p",[a._v("mark()方法会用mark指针指向position的位置。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("buffer.position(2).mark().position(4);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAxajZ6NDV6ajMwbGkwOG9hY3EuanBn?x-oss-process=image/format,png",alt:""}}),a._v("\nreset()方法会把position指针指向mark的位置。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("buffer.reset();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAxamRtYTN3ajMwa3EwOWFnbzcuanBn?x-oss-process=image/format,png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"_2-1-9-comparing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-9-comparing"}},[a._v("#")]),a._v(" 2.1.9 Comparing")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class ByteBuffer\n       extends Buffer implements Comparable\n  {\n  // This is a partial API listing\npublic boolean equals (Object ob)\npublic int compareTo (Object ob)\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("p",[a._v("equals()返回true需要满足三个条件：")]),a._v(" "),s("ul",[s("li",[a._v("Buffer包含相同类型的元素")]),a._v(" "),s("li",[a._v("两个Buffer的remaining()返回值相同")]),a._v(" "),s("li",[a._v("remaining data的序列相同\n下面是两个例子：\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnAxcXZnZnNpajMwbWcwejJxZDAuanBn?x-oss-process=image/format,png",alt:""}})])]),a._v(" "),s("h3",{attrs:{id:"_2-2-创建buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-创建buffer"}},[a._v("#")]),a._v(" 2.2 创建Buffer")]),a._v(" "),s("p",[a._v("创建新buffer的两种方式：allocation or wrapping")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class CharBuffer\nextends Buffer implements CharSequence, Comparable\n{\n}\n// This is a partial API listing\npublic static CharBuffer allocate (int capacity)\npublic static CharBuffer wrap (char [] array)\npublic static CharBuffer wrap (char [] array, int offset, int length)\npublic final boolean hasArray()\npublic final char [] array()\npublic final int arrayOffset()\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("p",[a._v("通过allocation创建的buffer是分配一块固定大小的堆内存作为buffer存储空间。\nwrapping创建的buffer是创建一个buffer对象指向一个array空间。")]),a._v(" "),s("h2",{attrs:{id:"_2-3-duplicating-buffers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-duplicating-buffers"}},[a._v("#")]),a._v(" 2.3 Duplicating Buffers")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class CharBuffer\nextends Buffer implements CharSequence, Comparable\n   {\n}\n// This is a partial API listing\npublic abstract CharBuffer duplicate();\npublic abstract CharBuffer asReadOnlyBuffer(); \npublic abstract CharBuffer slice();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("duplicate()创建一个新的buffer,和原buffer一样。\n两个buffer共享数据元素\n但是他们有独立的position, limit, and mark\n一个buffer更改了数据元素对另一个buffer可见\n只读、直接内存这两个属性也可以通过duplicate()继承\n举个例子：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CharBuffer buffer = CharBuffer.allocate (8); \nbuffer.position (3).limit (6).mark().position (5); \nCharBuffer dupeBuffer = buffer.duplicate(); buffer.clear();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnM0MDV4cWI2ajMwdmkwY2dxOTAuanBn?x-oss-process=image/format,png",alt:""}}),a._v("\nasReadOnlyBuffer()和duplicate()功能类似，只是asReadOnlyBuffer()返回一个只读的视图。\nslice() 返回一个新的buffer视图，不过\nnew_position = original_position\nnew_capacity = original_limit - original_position\n举个例子来看slice():")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("CharBuffer buffer = CharBuffer.allocate (8); \nbuffer.position (3).limit (5);\nCharBuffer sliceBuffer = buffer.slice();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnM0NXA2Y2llajMwc28wZW10ZTguanBn?x-oss-process=image/format,png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_2-4-byte-buffers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-byte-buffers"}},[a._v("#")]),a._v(" 2.4 Byte Buffers")]),a._v(" "),s("h3",{attrs:{id:"_2-4-1-byte-ordering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-byte-ordering"}},[a._v("#")]),a._v(" 2.4.1 Byte Ordering")]),a._v(" "),s("p",[a._v("原始数据类型在内存中的存储方式是多个字节的连续序列。\n举个例子一个32-bit int 值为 0x037FB4C7的内存存储序列可能为2-14也可能为2-15:\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnNnM0aDY2MGozajMwaTQwZWl3Z3MuanBn?x-oss-process=image/format,png",alt:""}}),a._v("\n这就是所谓的大端设计和小端设计。\n采用大端还是小端通常由硬件的设计者决定而不是小端的设计者。\nIP协议定义的字节顺序是大端。所有使用IP协议的多字节数值必须在网络字节序和本地主机字节序做转换。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("package java.nio;\npublic final class ByteOrder\n{\npublic static final ByteOrder BIG_ENDIAN public static final ByteOrder LITTLE_ENDIAN\npublic static ByteOrder nativeOrder()\npublic String toString()\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("p",[a._v("除了ByteBuffer之外，其他buffer的order()适中返回同一个值，ByteOrder.nativeOrder()。")]),a._v(" "),s("h3",{attrs:{id:"_2-4-2-direct-buffers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-direct-buffers"}},[a._v("#")]),a._v(" 2.4.2 Direct Buffers")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class ByteBuffer extends Buffer implements Comparable {\n// This is a partial API listing\npublic static ByteBuffer allocate (int capacity) ;\npublic static ByteBuffer allocateDirect (int capacity) ;\npublic abstract boolean isDirect();\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("allocateDirect可以直接在堆外开辟一个buffer。\n堆外buffer节省了用户空间和系统空间的buffer拷贝，提升效率。")]),a._v(" "),s("h3",{attrs:{id:"_2-4-3-view-buffers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-view-buffers"}},[a._v("#")]),a._v(" 2.4.3 View Buffers")]),a._v(" "),s("p",[a._v("收到数据的时候你可能要先看一下数据再决定做什么操作，这就需要用到ByteBuffer的视图API。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class ByteBuffer extends Buffer implements Comparable {\n// This is a partial API listing\npublic abstract CharBuffer asCharBuffer(); \npublic abstract ShortBuffer asShortBuffer(); \npublic abstract IntBuffer asIntBuffer();\n public abstract LongBuffer asLongBuffer();\n  public abstract FloatBuffer asFloatBuffer();\n   public abstract DoubleBuffer asDoubleBuffer();\n   }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("视图在直接内存buffer上操作更高效。\n当本地硬件的字节顺序和buffer中的字节顺序一致时，通过低级代码就可以操作buffer中的数据，而不需要经过字节码的编码解码。")]),a._v(" "),s("h3",{attrs:{id:"_2-4-4-data-element-views"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-data-element-views"}},[a._v("#")]),a._v(" 2.4.4 Data Element Views")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnN2hjZGhzbnFqajMwbWswOHNkaHIuanBn?x-oss-process=image/format,png",alt:""}}),a._v("\n当getInt() 被调用时，那么从当前位置开始的4个字节将被打包成一个int返回。\nint value = buffer.getInt();将返回buffer中的1-4位，具体返回的数据值与字节序有关系。\nint value = buffer.order (ByteOrder.BIG_ENDIAN).getInt();\n返回0x3BC5315E。\nint value = buffer.order (ByteOrder.LITTLE_ENDIAN).getInt();\n返回0x5E31C53B。")]),a._v(" "),s("h1",{attrs:{id:"第三章-channels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三章-channels"}},[a._v("#")]),a._v(" 第三章 Channels")]),a._v(" "),s("h2",{attrs:{id:"_3-1-basic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-basic"}},[a._v("#")]),a._v(" 3.1 basic")]),a._v(" "),s("p",[a._v("在NIO接口中我们需要使用Channel和Buffer进行IO操作，Channel模拟了流的概念，但是又有不同。数据总是从一个Channel读到一个buffer中，或者从一个buffer中写到channel中。\nchannel接口的主要实现类如下：")]),a._v(" "),s("ul",[s("li",[a._v("FileChannel")]),a._v(" "),s("li",[a._v("DatagramChannel")]),a._v(" "),s("li",[a._v("SocketChannel")]),a._v(" "),s("li",[a._v("ServerSocketChannel")])]),a._v(" "),s("p",[a._v("JavaNIO Channels和流有一些相似，但是又有些不同：")]),a._v(" "),s("p",[a._v("你可以同时读和写Channels，流Stream只支持单向的读或写（InputStream/OutputStream）")]),a._v(" "),s("ul",[s("li",[a._v("Channels可以异步的读和写，流Stream是同步的")]),a._v(" "),s("li",[a._v("Channels总是读取到buffer或者从buffer中写入")])]),a._v(" "),s("p",[a._v("下面分别介绍一下Channel最重要的一些实现类：")]),a._v(" "),s("ul",[s("li",[a._v("FileChannel : 可以读写文件中的数据")]),a._v(" "),s("li",[a._v("DatagramChannel：可以通过UDP协议读写数据")]),a._v(" "),s("li",[a._v("SocketChannel：可以通过TCP协议读写数据")]),a._v(" "),s("li",[a._v("ServerSocketChannel：允许我们像一个web服务器那样监听TCP链接请求，为每一个链接请求创建一个SocketChannel")])]),a._v(" "),s("h3",{attrs:{id:"_3-1-1-open-channel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-open-channel"}},[a._v("#")]),a._v(" 3.1.1 Open channel")]),a._v(" "),s("p",[a._v("FileChannel只能通过getChannel()得到。\nSocketChannel有工厂方法可以得到。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('SocketChannel sc = SocketChannel.open();\nsc.connect (new InetSocketAddress ("somehost", someport));\n\nServerSocketChannel ssc = ServerSocketChannel.open(); ssc.socket().bind (new InetSocketAddress (somelocalport));\nDatagramChannel dc = DatagramChannel.open();\n\nRandomAccessFile raf = new RandomAccessFile ("somefile", "r"); FileChannel fc = raf.getChannel();\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("h3",{attrs:{id:"_3-1-2-using-channels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-using-channels"}},[a._v("#")]),a._v(" 3.1.2 Using Channels")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public interface ReadableByteChannel extends Channel {\npublic int read (ByteBuffer dst) throws IOException;\n}\n\npublic interface WritableByteChannel extends Channel {\npublic int write (ByteBuffer src) throws IOException;\n }\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("p",[a._v("Channels 可以是单向或者双向的。\n如果一个class实现了上面两个接口，就是双向的。\nChannels可以在阻塞模式和非阻塞模式工作。\n只有socket和pipes可以工作在非阻塞模式。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-3-close-channels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-close-channels"}},[a._v("#")]),a._v(" 3.1.3 close Channels")]),a._v(" "),s("h2",{attrs:{id:"_3-2-scatter-gather"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-scatter-gather"}},[a._v("#")]),a._v(" 3.2 Scatter/Gather")]),a._v(" "),s("p",[a._v("Scatter：将多个buffer按照顺序合成一个\nGather：将一个字符串按照顺序拆分成多个。逐个填满buffer。\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnN3RkMXgzOXpxajMweTAwZWc3OGIuanBn?x-oss-process=image/format,png",alt:""}}),a._v(" "),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnN3RkMjRvbmtpajMxM3cwZjY3ODkuanBn?x-oss-process=image/format,png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_3-3-file-channels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-file-channels"}},[a._v("#")]),a._v(" 3.3 File Channels")]),a._v(" "),s("p",[a._v("File channels 只能以阻塞模式工作。")]),a._v(" "),s("h2",{attrs:{id:"_3-3-1-accessing-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-accessing-files"}},[a._v("#")]),a._v(" 3.3.1 Accessing Files")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class FileChannel extends AbstractChannel \nimplements ByteChannel, GatheringByteChannel, ScatteringByteChannel{\n// This is a partial API listing\n//获取position位置\npublic abstract long position()\n//设置position\npublic abstract void position (long newPosition)\n//从position位置开始读\npublic abstract int read (ByteBuffer dst)\n//从position位置开始读\npublic abstract int read (ByteBuffer dst, long position)\n//从position位置开始写\n public abstract int write (ByteBuffer src)\n//从position位置开始写\npublic abstract int write (ByteBuffer src, long position)\npublic abstract long size()\n//截取文件保留size大小，并移动position到size的位置\npublic abstract void truncate (long size) \n//强制刷新缓存到磁盘文件\npublic abstract void force (boolean metaData)\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br")])]),s("h3",{attrs:{id:"_3-3-2-file-locking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-file-locking"}},[a._v("#")]),a._v(" 3.3.2 File Locking")]),a._v(" "),s("h2",{attrs:{id:"_3-4-memory-mapped-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-memory-mapped-files"}},[a._v("#")]),a._v(" 3.4 Memory-Mapped Files")]),a._v(" "),s("h2",{attrs:{id:"_3-5-socket-channels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-socket-channels"}},[a._v("#")]),a._v(" 3.5 Socket Channels")]),a._v(" "),s("p",[a._v("The new socket channels can operate in "),s("strong",[a._v("nonblocking")]),a._v(" mode and are "),s("strong",[a._v("selectable")]),a._v(". These two capabilities enable tremendous scalability and flexibility in large applications.\nServerSocketChannel没有实现read和write接口，说明它不需要转发数据。它只负责家庭socket连接，创建SocketChannel。")]),a._v(" "),s("p",[a._v("a channel is a conduit to an I/O service and provides methods for interacting with that service")]),a._v(" "),s("p",[a._v("每个socket channels都有一个socket与之对应，调用socket()可以获得。\n但并不是所有的sockets都有channels。socket的getChannel()可能但会null;")]),a._v(" "),s("h3",{attrs:{id:"_3-5-1-nonblocking-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-nonblocking-mode"}},[a._v("#")]),a._v(" 3.5.1 Nonblocking Mode")]),a._v(" "),s("p",[a._v("调用configureBlocking (false);设置channel为非阻塞模式。\n但是只有持有blockingLock() 返回的对象锁的线程才能修改阻塞模式。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Socket socket = null;\nObject lockObj = serverChannel.blockingLock();\n// have a handle to the lock object, but haven't locked it yet\n// may block here until lock is acquired\nsynchronize (lockObj){\n// This thread now owns the lock; mode can't be changed boolean prevState = serverChannel.isBlocking();\nserverChannel.configureBlocking (false); socket = serverChannel.accept(); serverChannel.configureBlocking (prevState);\n}\n// lock is now released, mode is allowed to change\nif (socket != null) {\ndoSomethingWithTheSocket (socket);\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("h3",{attrs:{id:"_3-5-2-serversocketchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2-serversocketchannel"}},[a._v("#")]),a._v(" 3.5.2 ServerSocketChannel")]),a._v(" "),s("p",[a._v("The ServerSocketChannel class is a channel-based socket listener.\n它负责处理socket任务并添加channel。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class SocketChannel\n    extends AbstractSelectableChannel\n    implements ByteChannel, ScatteringByteChannel, GatheringByteChannel, NetworkChannel\n{\n//SocketChannel被创建但是并没有连接，open（）只是创建一个SocketChannel，还需要调用connect()连接到一个地址\npublic static SocketChannel open() throws IOException\n//创建并连接\npublic static SocketChannel open(SocketAddress remote) throws IOException\n//支持的操作（读、写、连接）\npublic final int validOps()\n、、\npublic abstract Socket socket();\n//是否连接到远程\npublic abstract boolean isConnected();\n//Connect（）方法是耗时的，因为需要数据包对话（TCP握手）。如果SocketChannel身上有并发、connect(),isConnectionPending返回true\npublic abstract boolean isConnectionPending();\n//建立连接\npublic abstract boolean connect(SocketAddress remote) throws IOException;\n//任何时候都可以安全的调用\npublic abstract boolean finishConnect() throws IOException;\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br")])]),s("p",[a._v("Socket channels是线程安全的。\nSocket是面向流的而不是面向数据包的，它能保证到达的顺序是发送的顺序，不能保证维护分组。发送方发送20个字节，接收方read可能直接受到7个字节，其余字节在传输中。所以，多个线程共享一个socket的一端不是好的设计。")]),a._v(" "),s("h3",{attrs:{id:"_3-5-4-datagramchannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-4-datagramchannel"}},[a._v("#")]),a._v(" 3.5.4 DatagramChannel")]),a._v(" "),s("p",[a._v("socketchannel为面向连接的流协议（如tcp/ip）\ndatagramchannel为面向无连接的数据包协议（如udp/ip）")]),a._v(" "),s("h3",{attrs:{id:"_3-5-5-pipes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-5-pipes"}},[a._v("#")]),a._v(" 3.5.5 Pipes")]),a._v(" "),s("p",[a._v("Pipe用于同一个JVM内不同线程之间的数据交换问题\n不同JVM之间的数据交换问题应该使用SocketChannel\nPipe类创建了一对channel对象，它们提供了一种回送机制。\nPipe实现两个进程之间的单向数据连接。\nPipe有一个SinkChannel和一个SourceChannel\n数据会从SourceChannel读取、被写到SinkChannel\n"),s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly90dmExLnNpbmFpbWcuY24vbGFyZ2UvMDA2eThtTjZseTFnOGFwejdtaHZ3ajMwbXMwN3d0YzkuanBn?x-oss-process=image/format,png",alt:""}})]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public abstract class Pipe {\n    public static abstract class SourceChannel\n        extends AbstractSelectableChannel\n        implements ReadableByteChannel, ScatteringByteChannel\n    {\n        protected SourceChannel(SelectorProvider provider) {\n            super(provider);\n        }\n        public final int validOps() {\n            return SelectionKey.OP_READ;\n        }\n    }\n\n    public static abstract class SinkChannel\n        extends AbstractSelectableChannel\n        implements WritableByteChannel, GatheringByteChannel\n    {\n        protected SinkChannel(SelectorProvider provider) {\n            super(provider);\n        }\n        public final int validOps() {\n            return SelectionKey.OP_WRITE;\n        }\n\n    }\n    protected Pipe() { }\n    //从管道读取数据，要访问source通道\n    public abstract SourceChannel source();\n    //向管道写入数据，要访问Sink通道\n    public abstract SinkChannel sink();\n    //管道创建\n    public static Pipe open() throws IOException {\n        return SelectorProvider.provider().openPipe();\n    }\n}\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br")])]),s("h1",{attrs:{id:"第四章-selectors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-selectors"}},[a._v("#")]),a._v(" 第四章 Selectors")]),a._v(" "),s("p",[a._v("Selector（选择器）是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接,仅用单个线程来处理多个Channels的好处是，只需要更少的线程来处理通道。")]),a._v(" "),s("h2",{attrs:{id:"_4-1-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基础"}},[a._v("#")]),a._v(" 4.1 基础")]),a._v(" "),s("ul",[s("li",[a._v("Selector：一个selector可以注册多个channel，一个线程通过管理Selector实现管理多个channel。")]),a._v(" "),s("li",[a._v("SelectableChannel：提供channle selectability的通用方法。")]),a._v(" "),s("li",[a._v("SelectionKey：封装了channle和selector的注册关系，包含注册的感兴趣的事件。")])]),a._v(" "),s("h2",{attrs:{id:"_4-2-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-示例"}},[a._v("#")]),a._v(" 4.2 示例")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//创建Selector\nSelector selector = Selector.open();\nchannel.configureBlocking(false);\n//注册Selector\nSelectionKey key = channel.register(selector, SelectionKey.OP_READ);\nwhile(true) {\n//单线程阻塞检查Selector中就绪的事件\n  int readyChannels = selector.select();\n  if(readyChannels == 0) continue;\n  Set selectedKeys = selector.selectedKeys();\n  Iterator keyIterator = selectedKeys.iterator();\n  //循环处理就绪的事件\n  while(keyIterator.hasNext()) {\n    SelectionKey key = keyIterator.next();\n    if(key.isAcceptable()) {\n        // a connection was accepted by a ServerSocketChannel.\n    } else if (key.isConnectable()) {\n        // a connection was established with a remote server.\n    } else if (key.isReadable()) {\n        // a channel is ready for reading\n    } else if (key.isWritable()) {\n        // a channel is ready for writing\n    }\n    keyIterator.remove();\n  }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);