(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{523:function(t,a,v){"use strict";v.r(a);var _=v(21),n=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"java-类的加载流程是怎样的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java-类的加载流程是怎样的"}},[t._v("#")]),t._v(" Java 类的加载流程是怎样的？")]),t._v(" "),v("p",[t._v("类从被加载到JVM中开始，到卸载为止，整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载七个阶段。\n其中类加载过程包括加载、验证、准备、解析和初始化五个阶段。\n"),v("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24ely1h0q15ynz1jj20ot0980sz.jpg",alt:""}})]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("做什么")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("加载")]),t._v(" "),v("td",[t._v("类加载阶段就是由类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例")])]),t._v(" "),v("tr",[v("td",[t._v("验证")]),t._v(" "),v("td",[t._v("验证类数据信息是否符合JVM规范，是否是一个有效的字节码文件，验证内容涵盖了类数据信息的格式验证、语义分析、操作验证等")])]),t._v(" "),v("tr",[v("td",[t._v("准备")]),t._v(" "),v("td",[t._v("为类中的所有静态变量分配内存空间，并为其设置一个初始值（由于还没有产生对象，实例变量不在此操作范围内）"),v("br"),t._v(" 被final修饰的静态变量，会直接赋予原值；类字段的字段属性表中存在ConstantValue属性，则在准备阶段，其值就是ConstantValue的值")])]),t._v(" "),v("tr",[v("td",[t._v("解析")]),t._v(" "),v("td",[t._v("可以认为是一些静态绑定的会被解析，动态绑定则只会在运行是进行解析；静态绑定包括一些final方法(不可以重写),static方法(只会属于当前类)，构造器(不会被重写)")])]),t._v(" "),v("tr",[v("td",[t._v("初始化")]),t._v(" "),v("td",[t._v("初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);