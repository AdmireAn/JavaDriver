(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{521:function(a,s,t){"use strict";t.r(s);var e=t(21),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"简述-java-的反射机制及其应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简述-java-的反射机制及其应用场景"}},[a._v("#")]),a._v(" 简述 Java 的反射机制及其应用场景")]),a._v(" "),t("p",[a._v("*** Java 的反射机制 ***  "),t("br"),a._v("\n这个机制允许程序在运行时透过Reflection APIs取得任何一个已知名称的class的内部信息 "),t("br"),a._v("\n包括其modifiers(诸如public, static 等)、superclass(例如Object)、实现之interfaces(例如Cloneable)，也包括fields和methods的所有信息，并可于运行时改变fields内容或唤起methods。 "),t("br"),a._v("\nJava反射机制容许程序在运行时加载、探知、使用编译期间完全未知的classes。 "),t("br"),a._v("\n换言之，Java可以加载一个运行时才得知名称的class，获得其完整结构。 "),t("br")]),a._v(" "),t("p",[a._v("*** 应用场景 ***  "),t("br"),a._v("\nArthas "),t("br"),a._v("\nRPC框架中的 动态代理 "),t("br"),a._v("\nSpring 加载 XML "),t("br"),a._v("\nJava 动态代理  "),t("br"),a._v("\nJDBC 驱动加载  "),t("br")])])}),[],!1,null,null,null);s.default=r.exports}}]);