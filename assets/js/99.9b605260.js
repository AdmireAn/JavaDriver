(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{599:function(s,e,t){"use strict";t.r(e);var n=t(21),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("select/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。")]),s._v(" "),t("h2",{attrs:{id:"select"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[s._v("#")]),s._v(" select")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("select 允许应用程序监视一组文件描述符，等待一个或者多个描述符成为就绪状态，从而完成 I/O 操作。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义，所以只能监听少于 FD_SETSIZE 数量的描述符。有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。")])]),s._v(" "),t("li",[t("p",[s._v("timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过 timeout。")])]),s._v(" "),t("li",[t("p",[s._v("成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("fd_set fd_in, fd_out;\nstruct timeval tv;\n\n// Reset the sets\nFD_ZERO( &fd_in );\nFD_ZERO( &fd_out );\n\n// Monitor sock1 for input events\nFD_SET( sock1, &fd_in );\n\n// Monitor sock2 for output events\nFD_SET( sock2, &fd_out );\n\n// Find out which socket has the largest numeric value as select requires it\nint largest_sock = sock1 > sock2 ? sock1 : sock2;\n\n// Wait up to 10 seconds\ntv.tv_sec = 10;\ntv.tv_usec = 0;\n\n// Call the select\nint ret = select( largest_sock + 1, &fd_in, &fd_out, NULL, &tv );\n\n// Check if select actually succeed\nif ( ret == -1 )\n    // report error and abort\nelse if ( ret == 0 )\n    // timeout; no event detected\nelse\n{\n    if ( FD_ISSET( sock1, &fd_in ) )\n        // input event on sock1\n\n    if ( FD_ISSET( sock2, &fd_out ) )\n        // output event on sock2\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br")])]),t("h2",{attrs:{id:"poll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#poll"}},[s._v("#")]),s._v(" poll")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int poll(struct pollfd *fds, unsigned int nfds, int timeout);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("poll 的功能与 select 类似，也是等待一组描述符中的一个成为就绪状态。")]),s._v(" "),t("p",[s._v("poll 中的描述符是 pollfd 类型的数组，pollfd 的定义如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("struct pollfd {\n               int   fd;         /* file descriptor */\n               short events;     /* requested events */\n               short revents;    /* returned events */\n           };\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// The structure for two events\nstruct pollfd fds[2];\n\n// Monitor sock1 for input\nfds[0].fd = sock1;\nfds[0].events = POLLIN;\n\n// Monitor sock2 for output\nfds[1].fd = sock2;\nfds[1].events = POLLOUT;\n\n// Wait 10 seconds\nint ret = poll( &fds, 2, 10000 );\n// Check if poll actually succeed\nif ( ret == -1 )\n    // report error and abort\nelse if ( ret == 0 )\n    // timeout; no event detected\nelse\n{\n    // If we detect the event, zero it out so we can reuse the structure\n    if ( fds[0].revents & POLLIN )\n        fds[0].revents = 0;\n        // input event on sock1\n\n    if ( fds[1].revents & POLLOUT )\n        fds[1].revents = 0;\n        // output event on sock2\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("h2",{attrs:{id:"比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[s._v("#")]),s._v(" 比较")]),s._v(" "),t("h3",{attrs:{id:"_1-功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-功能"}},[s._v("#")]),s._v(" 1. 功能")]),s._v(" "),t("p",[s._v("select 和 poll 的功能基本相同，不过在一些实现细节上有所不同。")]),s._v(" "),t("ul",[t("li",[s._v("select 会修改描述符，而 poll 不会；")]),s._v(" "),t("li",[s._v("select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听少于 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 没有描述符数量的限制；")]),s._v(" "),t("li",[s._v("poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。")]),s._v(" "),t("li",[s._v("如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。")])]),s._v(" "),t("h3",{attrs:{id:"_2-速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-速度"}},[s._v("#")]),s._v(" 2. 速度")]),s._v(" "),t("p",[s._v("select 和 poll 速度都比较慢，每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。")]),s._v(" "),t("h3",{attrs:{id:"_3-可移植性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-可移植性"}},[s._v("#")]),s._v(" 3. 可移植性")]),s._v(" "),t("p",[s._v("几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。")]),s._v(" "),t("h2",{attrs:{id:"epoll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[s._v("#")]),s._v(" epoll")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("int epoll_create(int size);\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；\nint epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符。")]),s._v(" "),t("p",[s._v("从上面的描述可以看出，epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。")]),s._v(" "),t("p",[s._v("epoll 仅适用于 Linux OS。")]),s._v(" "),t("p",[s._v("epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。")]),s._v(" "),t("p",[s._v("epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets.\n// The function argument is ignored (it was not before, but now it is), so put your favorite number here\nint pollingfd = epoll_create( 0xCAFE );\n\nif ( pollingfd < 0 )\n // report error\n\n// Initialize the epoll structure in case more members are added in future\nstruct epoll_event ev = { 0 };\n\n// Associate the connection class instance with the event. You can associate anything\n// you want, epoll does not use this information. We store a connection class pointer, pConnection1\nev.data.ptr = pConnection1;\n\n// Monitor for input, and do not automatically rearm the descriptor after the event\nev.events = EPOLLIN | EPOLLONESHOT;\n// Add the descriptor into the monitoring list. We can do it even if another thread is\n// waiting in epoll_wait - the descriptor will be properly added\nif ( epoll_ctl( epollfd, EPOLL_CTL_ADD, pConnection1->getSocket(), &ev ) != 0 )\n    // report error\n\n// Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen)\nstruct epoll_event pevents[ 20 ];\n\n// Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array\nint ready = epoll_wait( pollingfd, pevents, 20, 10000 );\n// Check if epoll actually succeed\nif ( ret == -1 )\n    // report error and abort\nelse if ( ret == 0 )\n    // timeout; no event detected\nelse\n{\n    // Check if any events detected\n    for ( int i = 0; i < ready; i++ )\n    {\n        if ( pevents[i].events & EPOLLIN )\n        {\n            // Get back our connection pointer\n            Connection * c = (Connection*) pevents[i].data.ptr;\n            c->handleReadEvent();\n         }\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br")])]),t("h2",{attrs:{id:"工作模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作模式"}},[s._v("#")]),s._v(" 工作模式")]),s._v(" "),t("p",[s._v("epoll 的描述符事件有两种触发模式：LT（level trigger）和 ET（edge trigger）。")]),s._v(" "),t("h3",{attrs:{id:"_1-lt-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-lt-模式"}},[s._v("#")]),s._v(" 1. LT 模式")]),s._v(" "),t("p",[s._v("当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。")]),s._v(" "),t("h3",{attrs:{id:"_2-et-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-et-模式"}},[s._v("#")]),s._v(" 2. ET 模式")]),s._v(" "),t("p",[s._v("和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。")]),s._v(" "),t("p",[s._v("很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。")]),s._v(" "),t("h2",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),t("p",[s._v("很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。")]),s._v(" "),t("h3",{attrs:{id:"_1-select-应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-select-应用场景"}},[s._v("#")]),s._v(" 1. select 应用场景")]),s._v(" "),t("p",[s._v("select 的 timeout 参数精度为微秒，而 poll 和 epoll 为毫秒，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制。")]),s._v(" "),t("p",[s._v("select 可移植性更好，几乎被所有主流平台所支持。")]),s._v(" "),t("h3",{attrs:{id:"_2-poll-应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-poll-应用场景"}},[s._v("#")]),s._v(" 2. poll 应用场景")]),s._v(" "),t("p",[s._v("poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。")]),s._v(" "),t("h3",{attrs:{id:"_3-epoll-应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-epoll-应用场景"}},[s._v("#")]),s._v(" 3. epoll 应用场景")]),s._v(" "),t("p",[s._v("只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。")]),s._v(" "),t("p",[s._v("需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。")]),s._v(" "),t("p",[s._v("需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。")]),s._v(" "),t("p",[s._v("因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。")]),s._v(" "),t("p",[s._v("并且 epoll 的描述符存储在内核，不容易调试。")])])}),[],!1,null,null,null);e.default=a.exports}}]);