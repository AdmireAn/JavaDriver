(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{547:function(a,e,t){"use strict";t.r(e);var r=t(21),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"标记-清除算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法"}},[a._v("#")]),a._v(" 标记-清除算法")]),a._v(" "),t("p",[a._v("该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：")]),a._v(" "),t("p",[a._v("效率问题\n空间问题（标记清除后会产生大量不连续的碎片）\n"),t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h6aysggm1gj20ny0jpmxv.jpg",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"标记-复制算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-复制算法"}},[a._v("#")]),a._v(" 标记-复制算法")]),a._v(" "),t("p",[a._v("为了解决效率问题，“标记-复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。\n"),t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h6ayt1s4lbj20ny0jp74f.jpg",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"标记-整理算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理算法"}},[a._v("#")]),a._v(" 标记-整理算法")]),a._v(" "),t("p",[a._v("根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。\n"),t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h6aytfwnjbj20hs09hdg0.jpg",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"分代收集算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分代收集算法"}},[a._v("#")]),a._v(" 分代收集算法")]),a._v(" "),t("p",[a._v("当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。")]),a._v(" "),t("p",[a._v("比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。")]),a._v(" "),t("p",[a._v("延伸面试问题： HotSpot 为什么要分为新生代和老年代？")]),a._v(" "),t("p",[a._v("根据上面的对分代收集算法的介绍回答。")]),a._v(" "),t("h2",{attrs:{id:"垃圾收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[a._v("#")]),a._v(" 垃圾收集器")]),a._v(" "),t("p",[a._v("如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。")]),a._v(" "),t("p",[a._v("虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。因为直到现在为止还没有最好的垃圾收集器出现，更加没有万能的垃圾收集器，我们能做的就是根据具体应用场景选择适合自己的垃圾收集器。试想一下：如果有一种四海之内、任何场景下都适用的完美收集器存在，那么我们的 HotSpot 虚拟机就不会实现那么多不同的垃圾收集器了。")]),a._v(" "),t("h2",{attrs:{id:"serial-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial-收集器"}},[a._v("#")]),a._v(" Serial 收集器")]),a._v(" "),t("p",[a._v('Serial（串行）收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ "Stop The World" ），直到它收集结束。')]),a._v(" "),t("p",[a._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h6aytsqyaxj20a205rt8o.jpg",alt:""}})]),a._v(" "),t("p",[a._v("虚拟机的设计者们当然知道 Stop The World 带来的不良用户体验，所以在后续的垃圾收集器设计中停顿时间在不断缩短（仍然还有停顿，寻找最优秀的垃圾收集器的过程仍然在继续）。")]),a._v(" "),t("p",[a._v("但是 Serial 收集器有没有优于其他垃圾收集器的地方呢？当然有，它简单而高效（与其他收集器的单线程相比）。Serial 收集器由于没有线程交互的开销，自然可以获得很高的单线程收集效率。Serial 收集器对于运行在 Client 模式下的虚拟机来说是个不错的选择。")]),a._v(" "),t("h2",{attrs:{id:"parnew-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[a._v("#")]),a._v(" ParNew 收集器")]),a._v(" "),t("p",[a._v("ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。")]),a._v(" "),t("p",[a._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h6ayu4tt15j20bx07974b.jpg",alt:""}})]),a._v(" "),t("p",[a._v("它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。")]),a._v(" "),t("p",[a._v("并行和并发概念补充：")]),a._v(" "),t("p",[a._v("并行（Parallel） ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。")]),a._v(" "),t("p",[a._v("并发（Concurrent）：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个 CPU 上。")]),a._v(" "),t("h2",{attrs:{id:"parallel-scavenge-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge-收集器"}},[a._v("#")]),a._v(" Parallel Scavenge 收集器")]),a._v(" "),t("p",[a._v("Parallel Scavenge 收集器也是使用标记-复制算法的多线程收集器，它看上去几乎和 ParNew 都一样。 那么它有什么特别之处呢？")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[a._v("-XX:+UseParallelGC\n\n    使用 Parallel 收集器+ 老年代串行\n\n-XX:+UseParallelOldGC\n\n    使用 Parallel 收集器+ 老年代并行\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）。CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。 Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理优化交给虚拟机去完成也是一个不错的选择。")]),a._v(" "),t("p",[a._v("新生代采用标记-复制算法，老年代采用标记-整理算法。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h6ayuvquk9j20bx07974b.jpg",alt:""}})]),a._v(" "),t("p",[a._v("这是 JDK1.8 默认收集器")]),a._v(" "),t("p",[a._v("使用 java -XX:+PrintCommandLineFlags -version 命令查看")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[a._v('-XX:InitialHeapSize=262921408 -XX:MaxHeapSize=4206742528 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC\njava version "1.8.0_211"\nJava(TM) SE Runtime Environment (build 1.8.0_211-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)\nJDK1.8 默认使用的是 Parallel Scavenge + Parallel Old，如果指定了-XX:+UseParallelGC 参数，则默认指定了-XX:+UseParallelOldGC，可以使用-XX:-UseParallelOldGC 来禁用该功能\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h2",{attrs:{id:"serial-old-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[a._v("#")]),a._v(" Serial Old 收集器")]),a._v(" "),t("p",[a._v("Serial 收集器的老年代版本，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。")]),a._v(" "),t("h2",{attrs:{id:"parallel-old-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[a._v("#")]),a._v(" Parallel Old 收集器")]),a._v(" "),t("p",[a._v("Parallel Scavenge 收集器的老年代版本。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。")]),a._v(" "),t("h2",{attrs:{id:"cms-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms-收集器"}},[a._v("#")]),a._v(" CMS 收集器")]),a._v(" "),t("p",[a._v("CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。")]),a._v(" "),t("p",[a._v("CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。")]),a._v(" "),t("p",[a._v("从名字中的Mark Sweep这两个词可以看出，CMS 收集器是一种 “标记-清除”算法实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：")]),a._v(" "),t("p",[a._v("初始标记： 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；\n并发标记： 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。\n重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短\n并发清除： 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。\n"),t("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h6ayvgixf4j20gl07tmxh.jpg",alt:""}})]),a._v(" "),t("p",[a._v("从它的名字就可以看出它是一款优秀的垃圾收集器，主要优点：并发收集、低停顿。但是它有下面三个明显的缺点：")]),a._v(" "),t("p",[a._v("对 CPU 资源敏感；\n无法处理浮动垃圾；\n它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。")]),a._v(" "),t("h2",{attrs:{id:"g1-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1-收集器"}},[a._v("#")]),a._v(" G1 收集器")]),a._v(" "),t("p",[a._v("G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.")]),a._v(" "),t("p",[a._v("被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备以下特点：")]),a._v(" "),t("p",[a._v("并行与并发：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。\n分代收集：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。\n空间整合：与 CMS 的“标记-清理”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。\n可预测的停顿：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。\nG1 收集器的运作大致分为以下几个步骤：")]),a._v(" "),t("p",[a._v("初始标记\n并发标记\n最终标记\n筛选回收\nG1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来) 。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。")]),a._v(" "),t("h2",{attrs:{id:"zgc-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zgc-收集器"}},[a._v("#")]),a._v(" ZGC 收集器")]),a._v(" "),t("p",[a._v("与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用标记-复制算法，不过 ZGC 对该算法做了重大改进。")]),a._v(" "),t("p",[a._v("在 ZGC 中出现 Stop The World 的情况会更少！\n详情可以看 ： "),t("a",{attrs:{href:"https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("《新一代垃圾回收器 ZGC 的探索与实践》"),t("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);