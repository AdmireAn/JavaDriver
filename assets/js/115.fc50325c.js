(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{617:function(v,_,t){"use strict";t.r(_);var e=t(21),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[v._v("#")]),v._v(" 数组")]),v._v(" "),t("p",[v._v("数组是列表的实现方式之一，也是面试中经常涉及到的数据结构。")]),v._v(" "),t("p",[v._v("正如前面提到的，数组是列表的实现方式，它具有列表的特征，同时也具有自己的一些特征。然而，在具体的编程语言中，数组这个数据结构的实现方式具有一定差别。比如 C++ 和 Java 中，数组中的元素类型必须保持一致，而 Python 中则可以不同。Python 中的数组叫做 list，具有更多的高级功能。")]),v._v(" "),t("p",[v._v("那么如何从宏观上区分列表和数组呢？这里有一个重要的概念："),t("strong",[v._v("索引")]),v._v("。")]),v._v(" "),t("p",[v._v("首先，数组会用一些名为 "),t("code",[v._v("索引")]),v._v(" 的数字来标识每项数据在数组中的位置，且在大多数编程语言中，索引是从 "),t("code",[v._v("0")]),v._v(" 算起的。我们可以根据数组中的索引，快速访问数组中的元素。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozrdvktdj30iy06qmx4.jpg",alt:"4.png"}})]),v._v(" "),t("p",[t("strong",[v._v("而列表中没有索引，这是数组与列表最大的不同点")]),v._v("。")]),v._v(" "),t("p",[v._v("其次，数组中的元素在内存中是连续存储的，且每个元素占用相同大小的内存。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozrke8wuj30ux0gr409.jpg",alt:"5.png"}})]),v._v(" "),t("p",[v._v("相反，列表中的元素在内存中可能彼此相邻，也可能不相邻。比如列表的另一种实现方式——链表，它的元素在内存中则不一定是连续的。")]),v._v(" "),t("h2",{attrs:{id:"数组的操作数组的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的操作数组的操作"}},[v._v("#")]),v._v(" 数组的操作数组的操作")]),v._v(" "),t("h3",{attrs:{id:"读取元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读取元素"}},[v._v("#")]),v._v(" 读取元素")]),v._v(" "),t("p",[v._v("读取数组中的元素，即通过数组的索引访问数组中的元素。")]),v._v(" "),t("p",[v._v("这里的索引其实就是内存地址，值得一提的是，计算机可以跳跃到任意的内存地址上，这就意味着只要计算出数组中元素的内存地址，则可以一步访问到数组中的元素。")]),v._v(" "),t("p",[v._v("可以形象地将计算机中的内存看作一系列排列好的格子，这些格子中，每一个格子对应一个内存地址，数据会存储在不同的格子中。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozs98zimj30zk0k0ab5.jpg",alt:"1.png"}})]),v._v(" "),t("p",[v._v("而对于数组，计算机会在内存中申请一段 "),t("strong",[v._v("连续")]),v._v(" 的空间，并且会记下索引为 "),t("code",[v._v("0")]),v._v(" 处的内存地址。例如对于一个数组 "),t("code",[v._v("['oranges', 'apples', 'bananas', 'pears', 'tomatoes']")]),v._v("，为了方便起见，我们假设每个元素只占用一个字节，它的索引与内存地址的关系如下图所示。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozslroucj30zk0akdgn.jpg",alt:"2.png"}})]),v._v(" "),t("p",[v._v("当我们访问数组中索引为 "),t("code",[v._v("3")]),v._v(" 处的元素时，计算机会进行如下计算：")]),v._v(" "),t("ul",[t("li",[v._v("找到该数组的索引 "),t("code",[v._v("0")]),v._v(" 的内存地址： "),t("code",[v._v("2008")]),v._v("；")]),v._v(" "),t("li",[t("code",[v._v("pears")]),v._v(" 的索引为 "),t("code",[v._v("3")]),v._v("，计算该元素的内存地址为 "),t("code",[v._v("2008 + 3 = 2011")]),v._v("；")])]),v._v(" "),t("p",[v._v("接下来，计算机就可以在直接通过该地址访问到数组中索引为 "),t("code",[v._v("3")]),v._v(" 的元素了，计算过程很快，因此可以将整个访问过程只看作一个动作，因此时间复杂度为 。")]),v._v(" "),t("h3",{attrs:{id:"查找元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找元素"}},[v._v("#")]),v._v(" 查找元素")]),v._v(" "),t("p",[v._v("前面我们谈到计算机只会保存数组中索引为 "),t("code",[v._v("0")]),v._v(" 处元素的内存地址，因此当计算机想要知道数组中是否包含某个元素时，只能从索引 "),t("code",[v._v("0")]),v._v(" 处开始，逐步向后查询。")]),v._v(" "),t("p",[v._v("还是上面的例子，如果我们要查找数组中是否包含元素 "),t("code",[v._v("pears")]),v._v("，计算机会从索引 "),t("code",[v._v("0")]),v._v(" 开始，逐个比较对应的元素，直到找到该元素后停止搜索，或到达数组的末尾后停止。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozxdyr51g316o0dce89.gif",alt:"3.gif"}})]),v._v(" "),t("p",[v._v("我们发现，该数组的长度为 "),t("code",[v._v("5")]),v._v("，最坏情况下（比如我们查找元素 "),t("code",[v._v("tomatoes")]),v._v(" 或查找数组中不包含的元素），我们需要查询数组中的每个元素，因此时间复杂度为$ O(N)$，"),t("em",[v._v("N")]),v._v(" 为数组的长度。")]),v._v(" "),t("h3",{attrs:{id:"插入元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入元素"}},[v._v("#")]),v._v(" 插入元素")]),v._v(" "),t("p",[v._v("假如我们想在原有的数组中再插入一个元素 "),t("code",[v._v("flowers")]),v._v(" 呢？")]),v._v(" "),t("p",[v._v("如果要将该元素插入到数组的末尾，只需要一步。即计算机通过数组的长度和位置计算出即将插入元素的内存地址，然后将该元素插入到指定位置即可。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozvafsuog30uh0dcu0x.gif",alt:"4.gif"}})]),v._v(" "),t("p",[v._v("然而，如果要将该元素插入到数组中的其他位置，则会有所区别，这时我们首先需要为该元素所要插入的位置"),t("code",[v._v("腾出")]),v._v(" 空间，然后进行插入操作。比如，我们想要在索引 "),t("code",[v._v("2")]),v._v(" 处插入 "),t("code",[v._v("flowers")]),v._v("。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozvjtbgtg30uh0dcu0z.gif",alt:"5.gif"}})]),v._v(" "),t("p",[v._v("我们发现，如果需要频繁地对数组元素进行插入操作，会造成时间的浪费。事实上，另一种数据结构，即链表可以有效解决这个问题。")]),v._v(" "),t("h3",{attrs:{id:"删除元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除元素"}},[v._v("#")]),v._v(" 删除元素")]),v._v(" "),t("p",[v._v("删除元素与插入元素的操作类似，当我们删除掉数组中的某个元素后，数组中会留下 "),t("code",[v._v("空缺")]),v._v(" 的位置，而数组中的元素在内存中是连续的，这就使得后面的元素需对该位置进行 "),t("code",[v._v("填补")]),v._v(" 操作。")]),v._v(" "),t("p",[v._v("以删除索引 "),t("code",[v._v("1")]),v._v(" 中的元素 "),t("code",[v._v("apples")]),v._v(" 为例，具体过程如图所示。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozvs74g7g30uh0dcu0x.gif",alt:"6.gif"}})]),v._v(" "),t("p",[v._v("同样地，数组的长度为 "),t("code",[v._v("5")]),v._v("，最坏情况下，我们删除第一个元素，后面的 "),t("code",[v._v("4")]),v._v(" 个元素需要向前移动，加上删除操作，共需执行 "),t("code",[v._v("5")]),v._v(" 步，因此时间复杂度为 ，"),t("em",[v._v("N")]),v._v(" 为数组的长度。")]),v._v(" "),t("h2",{attrs:{id:"二维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二维数组"}},[v._v("#")]),v._v(" 二维数组")]),v._v(" "),t("p",[v._v("二维数组是一种结构较为特殊的数组，只是将数组中的每个元素变成了一维数组。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozw53udoj30zk0ftdgm.jpg",alt:"1.png"}})]),v._v(" "),t("p",[v._v("所以二维数组的本质上仍然是一个一维数组，内部的一维数组仍然从索引 "),t("code",[v._v("0")]),v._v(" 开始，我们可以将它看作一个矩阵，并处理矩阵的相关问题。")]),v._v(" "),t("h3",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[v._v("#")]),v._v(" "),t("a",{attrs:{href:"https://javakeeper.starfish.ink/data-structure-algorithms/Array.html#%E7%A4%BA%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[v._v("#"),t("OutboundLink")],1),v._v("示例")]),v._v(" "),t("p",[v._v("类似一维数组，对于一个二维数组 "),t("code",[v._v("A = [[1, 2, 3, 4],[2, 4, 5, 6],[1, 4, 6, 8]]")]),v._v("，计算机同样会在内存中申请一段 "),t("strong",[v._v("连续")]),v._v(" 的空间，并记录第一行数组的索引位置，即 "),t("code",[v._v("A[0][0]")]),v._v(" 的内存地址，它的索引与内存地址的关系如下图所示。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/008i3skNly1gqozwtoa8xj30zk0ftq6g.jpg",alt:"2.png"}})]),v._v(" "),t("p",[v._v("注意，实际数组中的元素由于类型的不同会占用不同的字节数，因此每个方格地址之间的差值可能不为 "),t("code",[v._v("1")]),v._v("。")]),v._v(" "),t("p",[v._v("实际题目中，往往使用二维数据处理矩阵类相关问题，包括矩阵旋转、对角线遍历，以及对子矩阵的操作等。")])])}),[],!1,null,null,null);_.default=a.exports}}]);