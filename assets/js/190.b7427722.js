(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{691:function(t,e,r){"use strict";r.r(e);var _=r(21),v=Object(_.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"使用场景-scenario"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用场景-scenario"}},[t._v("#")]),t._v(" 使用场景(Scenario)")]),t._v(" "),r("p",[t._v("微博和Twitter都有140字数的限制，如果分享一个长网址，很容易就超出限制，发布出去。短网址服务可以把一个长网址变成短网址，方便在社交网络上传播。")]),t._v(" "),r("h2",{attrs:{id:"需求-needs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#需求-needs"}},[t._v("#")]),t._v(" 需求(Needs)")]),t._v(" "),r("p",[t._v("很显然，要尽可能的"),r("strong",[t._v("短")]),t._v("。长度设计为多少才合适呢？")]),t._v(" "),r("h2",{attrs:{id:"短网址的长度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#短网址的长度"}},[t._v("#")]),t._v(" 短网址的长度")]),t._v(" "),r("p",[t._v("当前互联网上的网页总数大概是 45亿(参考 "),r("a",{attrs:{href:"http://www.worldwidewebsize.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.worldwidewebsize.com"),r("OutboundLink")],1),t._v(")，45亿超过了 2^{32}=4294967296232=4294967296，但远远小于64位整数的上限值，那么用一个64位整数足够了。")]),t._v(" "),r("p",[t._v("微博的短网址服务用的是长度为7的字符串，这个字符串可以看做是62进制的数，那么最大能表示{62}^7=3521614606208627=3521614606208个网址，远远大于45亿。所以"),r("strong",[t._v("长度为7就足够了")]),t._v("。")]),t._v(" "),r("p",[t._v("一个64位整数如何转化为字符串呢？，假设我们只是用大小写字母加数字，那么可以看做是62进制数，log_{62} {(2^{64}-1)}=10.7"),r("em",[t._v("l"),r("strong",[t._v("o")]),t._v("g")]),t._v("62(264−1)=10.7，即字符串最长11就足够了。")]),t._v(" "),r("p",[t._v("实际生产中，还可以再短一点，比如新浪微博采用的长度就是7，因为 62^7=3521614606208627=3521614606208，这个量级远远超过互联网上的URL总数了，绝对够用了。")]),t._v(" "),r("p",[t._v("现代的web服务器（例如Apache, Nginx）大部分都区分URL里的大小写了，所以用大小写字母来区分不同的URL是没问题的。")]),t._v(" "),r("p",[t._v("因此，"),r("strong",[t._v("正确答案：长度不超过7的字符串，由大小写字母加数字共62个字母组成")])]),t._v(" "),r("h2",{attrs:{id:"一对一还是一对多映射"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一对一还是一对多映射"}},[t._v("#")]),t._v(" 一对一还是一对多映射？")]),t._v(" "),r("p",[t._v("一个长网址，对应一个短网址，还是可以对应多个短网址？ 这也是个重大选择问题")]),t._v(" "),r("p",[t._v("一般而言，一个长网址，在不同的地点，不同的用户等情况下，生成的短网址应该不一样，这样，在后端数据库中，可以更好的进行数据分析。如果一个长网址与一个短网址一一对应，那么在数据库中，仅有一行数据，无法区分不同的来源，就无法做数据分析了。")]),t._v(" "),r("p",[t._v("以这个7位长度的短网址作为唯一ID，这个ID下可以挂各种信息，比如生成该网址的用户名，所在网站，HTTP头部的 User Agent等信息，收集了这些信息，才有可能在后面做大数据分析，挖掘数据的价值。短网址服务商的一大盈利来源就是这些数据。")]),t._v(" "),r("p",[r("strong",[t._v("正确答案：一对多")])]),t._v(" "),r("h2",{attrs:{id:"如何计算短网址"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何计算短网址"}},[t._v("#")]),t._v(" 如何计算短网址")]),t._v(" "),r("p",[t._v("现在我们设定了短网址是一个长度为7的字符串，如何计算得到这个短网址呢？")]),t._v(" "),r("p",[t._v("最容易想到的办法是哈希，先hash得到一个64位整数，将它转化为62进制整，截取低7位即可。但是哈希算法会有冲突，如何处理冲突呢，又是一个麻烦。这个方法只是转移了矛盾，没有解决矛盾，抛弃。")]),t._v(" "),r("p",[r("strong",[t._v("正确答案："),r("a",{attrs:{href:"https://soulmachine.gitbooks.io/system-design/content/cn/distributed-id-generator.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式发号器(Distributed ID Generator)"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"如何存储"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何存储"}},[t._v("#")]),t._v(" 如何存储")]),t._v(" "),r("p",[t._v("如果存储短网址和长网址的对应关系？以短网址为 primary key, 长网址为value, 可以用传统的关系数据库存起来，例如MySQL, PostgreSQL，也可以用任意一个分布式KV数据库，例如Redis, LevelDB。")]),t._v(" "),r("p",[t._v("如果你手痒想要手工设计这个存储，那就是另一个话题了，你需要完整地造一个KV存储引擎轮子。当前流行的KV存储引擎有LevelDB何RockDB，去读它们的源码吧 😄")]),t._v(" "),r("h2",{attrs:{id:"_301还是302重定向"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_301还是302重定向"}},[t._v("#")]),t._v(" 301还是302重定向")]),t._v(" "),r("p",[t._v("这也是一个有意思的问题。这个问题主要是考察你对301和302的理解，以及浏览器缓存机制的理解。")]),t._v(" "),r("p",[t._v("301是永久重定向，302是临时重定向。短地址一经生成就不会变化，所以用301是符合http语义的。但是如果用了301， Google，百度等搜索引擎，搜索的时候会直接展示真实地址，那我们就无法统计到短地址被点击的次数了，也无法收集用户的Cookie, User Agent 等信息，这些信息可以用来做很多有意思的大数据分析，也是短网址服务商的主要盈利来源。")]),t._v(" "),r("p",[t._v("所以，"),r("strong",[t._v("正确答案是302重定向")]),t._v("。")]),t._v(" "),r("p",[t._v("可以抓包看看新浪微博的短网址是怎么做的，使用 Chrome 浏览器，访问这个URL http://t.cn/RX2VxjI，是我事先发微博自动生成的短网址。来抓包看看返回的结果是啥，")]),t._v(" "),r("p",[r("img",{attrs:{src:"http://cn.soulmachine.me/images/tinyurl-302.png",alt:"img"}})]),t._v(" "),r("p",[t._v("可见新浪微博用的就是302临时重定向。")]),t._v(" "),r("h2",{attrs:{id:"预防攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预防攻击"}},[t._v("#")]),t._v(" 预防攻击")]),t._v(" "),r("p",[t._v("如果一些别有用心的黑客，短时间内向TinyURL服务器发送大量的请求，会迅速耗光ID，怎么办呢？")]),t._v(" "),r("p",[t._v("首先，限制IP的单日请求总数，超过阈值则直接拒绝服务。")]),t._v(" "),r("p",[t._v("光限制IP的请求数还不够，因为黑客一般手里有上百万台肉鸡的，IP地址大大的有，所以光限制IP作用不大。")]),t._v(" "),r("p",[t._v("可以用一台Redis作为缓存服务器，存储的不是 ID->长网址，而是 长网址->ID，仅存储一天以内的数据，用LRU机制进行淘汰。这样，如果黑客大量发同一个长网址过来，直接从缓存服务器里返回短网址即可，他就无法耗光我们的ID了。")]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://soulmachine.gitbooks.io/system-design/content/cn/tinyurl.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("短链接设计"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=v.exports}}]);