(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{693:function(n,s,e){"use strict";e.r(s);var a=e(21),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"_1-uuid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-uuid"}},[n._v("#")]),n._v(" 1.UUID")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("UUID.randomUUID().toString()\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("【优点】")]),n._v(" "),e("ol",[e("li",[n._v("本地生成无网络消耗，并具有唯一性。")])]),n._v(" "),e("p",[n._v("【缺点】")]),n._v(" "),e("ol",[e("li",[n._v("长度较长且无序，也没有实际意义；")]),n._v(" "),e("li",[n._v("不适用于实际的业务需求。像用作订单号UUID这样的字符串没有丝毫的意义，看不出和订单相关的有用信息；")]),n._v(" "),e("li",[n._v("如果做mysql表主键的话，由于mysql的底层存储结构是B+树，节点在排序等操作时，性能差于整型。")])]),n._v(" "),e("h2",{attrs:{id:"_2-uuid转long的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-uuid转long的方式"}},[n._v("#")]),n._v(" 2.UUID转Long的方式")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("查看UUID类的toString()方法，会发现UUID是由高64位和低64位组合而成：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public String toString() {\n        return (digits(mostSigBits >> 32, 8) + "-" +\n                digits(mostSigBits >> 16, 4) + "-" +\n                digits(mostSigBits, 4) + "-" +\n                digits(leastSigBits >> 48, 4) + "-" +\n                digits(leastSigBits, 12));\n    }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("UUID的高64位与0111111111111111111111111111111111111111111111111111111111111111做按位运算，可保证生成的id始终为正数。")]),n._v(" "),e("h2",{attrs:{id:"_3-数据库自增id"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据库自增id"}},[n._v("#")]),n._v(" 3.数据库自增ID")]),n._v(" "),e("p",[n._v("基于数据库的auto_increment自增ID。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("CREATE DATABASE `SEQ_ID`;\nCREATE TABLE SEQID.SEQUENCE_ID (\n    id bigint(20) unsigned NOT NULL auto_increment, \n    value char(10) NOT NULL default '',\n    PRIMARY KEY (id),\n) ENGINE=MyISAM;\n\ninsert into SEQUENCE_ID(value) VALUES ('values');\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("【优点】")]),n._v(" "),e("ol",[e("li",[n._v("ID自增，数值类型存取性能好；")])]),n._v(" "),e("p",[n._v("【缺点】\n1.单点要防止宕机风险；\n2.集群模式难扩展，比如步长。")]),n._v(" "),e("h2",{attrs:{id:"_4-redis的incr自增"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis的incr自增"}},[n._v("#")]),n._v(" 4.Redis的incr自增")]),n._v(" "),e("p",[n._v("【优点】")]),n._v(" "),e("ol",[e("li",[n._v("Redis的优点是单线程、免去了线程间切换的开销，存取速度快。")])]),n._v(" "),e("p",[n._v("【缺点】")]),n._v(" "),e("ol",[e("li",[n._v("Redis满足分布式CAP原则中的A（Availability可用性）、P（Partition tolerance分区容错性），不能满足C（Consistency一致性），也就是说Redis无法保证在主节点宕机时自动完成数据一致性的同步操作。那么在极端情况下，主节点挂掉后可能产生重复的id。")]),n._v(" "),e("li",[n._v("即使考虑用持久化的方式来规避上面的问题，仍存在以下缺陷：\nRDB方式：定时备份，可能存在数据丢失。假如连续自增但redis没及时持久化，而此时Redis挂掉了，重启Redis后可能会出现ID重复的情况。\nAOF方式：每条写命令都备份，不会出现ID重复的情况，但文件过大，恢复数据慢。")])]),n._v(" "),e("h2",{attrs:{id:"_5-数据库号段模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-数据库号段模式"}},[n._v("#")]),n._v(" 5.数据库号段模式")]),n._v(" "),e("p",[n._v("用表记录当前最大id，和自增步长。每次机器通过乐观锁的方式修改当前最大id字段：\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/5c799864cd7e7719e334477913d2c853.png",alt:"file"}})]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("update id_generator set max_id = #{max_id+step}, version = version + 1 where version = #{version} and biz_type = XXX\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("【优点】\n不会频繁的访问数据库，对数据库的压力小很多。\n【图示】\n"),e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AdmireAn/blobImage@main/img/0ed0f41a5b3e3bf5d3c328b37040bd53.png",alt:"file"}})]),n._v(" "),e("h3",{attrs:{id:"_6-snowflake"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-snowflake"}},[n._v("#")]),n._v(" 6.Snowflake")]),n._v(" "),e("p",[n._v("【组成】\n"),e("img",{attrs:{src:"https://static.yximgs.com/udata/pkg/EE-KSTACK/e1ea143098213f4e6fc21a9f79128f76.png",alt:"file"}}),n._v("\n符号位：1bit：符号位，固定是0，表示全部ID都是正整数\n时间戳：与指定日期的时间差（毫秒级），41位，够用69年\n集群ID、机器ID：10位，最多支持1024台机器\n自增序列：12位，每台机器每毫秒内最多产生2^12即4096个序列号\n【优点】")]),n._v(" "),e("ol",[e("li",[n._v("本地生成无网络消耗。")])]),n._v(" "),e("p",[n._v("【缺点】")]),n._v(" "),e("ol",[e("li",[n._v("依赖系统时间，如果系统时间被回调，或者改变，可能会造成id冲突或者重复，也能出现不是全局递增的情况。")])]),n._v(" "),e("h3",{attrs:{id:"_6-leaf-snowflake-美团"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-leaf-snowflake-美团"}},[n._v("#")]),n._v(" 6.Leaf-snowflake（美团）")]),n._v(" "),e("p",[n._v("美团对号段模式和雪花算法的实现方式均有改进。\n【文档】\nhttps://tech.meituan.com/2017/04/21/mt-leaf.html\n【得名】\n德国哲学家、数学家莱布尼茨的一句话： >There are no two identical leaves in the world > “世界上没有两片相同的树叶”。\n【号段模式改进】\n基于数据库号段模式，但取号段的时机不在号段消耗完的时候进行，而是当号段消费到某个点时就异步的把下一个号段加载到内存中，好处是不阻塞临界点的ID下发。\n"),e("img",{attrs:{src:"https://static.yximgs.com/udata/pkg/EE-KSTACK/1f55380dbd476bf1c74b16271d61c2d6.png",alt:"file"}})]),n._v(" "),e("p",[n._v("【雪花算法改进——解决时钟回退方案】")]),n._v(" "),e("ol",[e("li",[n._v("启动时：\na. 弱依赖ZooKeeper，由Zookeepp的持久化顺序节点来存储wokerId。若写过，则用自身系统时间与leaf_forever/${self}节点记录时间做比较，若小于leaf_forever/${self}时间则认为机器时间发生了大步长回拨，服务启动失败并报警。\nb. 若未写过，证明是新服务节点，直接创建持久节点leaf_forever/${self}并写入自身系统时间，接下来综合对比其余Leaf节点的系统时间来判断自身系统时间是否准确，具体做法是取leaf_temporary下的所有临时节点(所有运行中的Leaf-snowflake节点)的服务IP：Port，然后通过RPC请求得到所有节点的系统时间，计算sum(time)/nodeSize。\nc. 若abs( 系统时间-sum(time)/nodeSize ) < 阈值，认为当前系统时间准确，正常启动服务，同时写临时节点leaf_temporary/${self} 维持租约。\nd. 否则认为本机系统时间发生大步长偏移，启动失败并报警。\ne. 每隔一段时间(3s)上报自身系统时间写入leaf_forever/${self}。")]),n._v(" "),e("li",[n._v("运行时：\na. 建议可以直接关闭NTP同步；【Network Time Protocol（NTP）】\nb. 做一层重试，然后上报报警系统，更或者是发现有时钟回拨之后自动摘除本身节点并报警；\n"),e("img",{attrs:{src:"https://static.yximgs.com/udata/pkg/EE-KSTACK/78860574642257991da5e83c9f90e11c.png",alt:"file"}})])]),n._v(" "),e("p",[n._v("【主要代码】\n号段模式：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//LeafController.class\n@RequestMapping(value = "/api/segment/get/{key}")\npublic String getSegmentId(@PathVariable("key") String key) {\n        return get(key, segmentService.getId(key));\n}\n\n//SegmentIDGenImpl.class\n@Override\npublic Result get(final String key) {\n        // 将初始值和步长初始化\n        if (!initOK) {\n                return new Result(EXCEPTION_ID_IDCACHE_INIT_FALSE, Status.EXCEPTION);\n        }\n        // key为业务标识\n        if (cache.containsKey(key)) {\n                SegmentBuffer buffer = cache.get(key);\n                // 如果当前还没有初始化号段\n                if (!buffer.isInitOk()) {\n                        synchronized (buffer) {\n                                if (!buffer.isInitOk()) {\n                                        try {\n                                                updateSegmentFromDb(key, buffer.getCurrent());\n                                                logger.info("Init buffer. Update leafkey {} {} from db", key, buffer.getCurrent());\n                                                buffer.setInitOk(true);\n                                        } catch (Exception e) {\n                                                logger.warn("Init buffer {} exception", buffer.getCurrent(), e);\n                                        }\n                                }\n                        }\n                }\n                // 从缓存中取值\n                return getIdFromSegmentBuffer(cache.get(key));\n        }\n        return new Result(EXCEPTION_ID_KEY_NOT_EXISTS, Status.EXCEPTION);\n}\n\nprivate ExecutorService service = new ThreadPoolExecutor(5, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new UpdateThreadFactory());\n\npublic Result getIdFromSegmentBuffer(final SegmentBuffer buffer) {\n            while (true) {\n                    buffer.rLock().lock();\n                    try {\n                            final Segment segment = buffer.getCurrent();\n                            // 当号段消费到某个点时就异步的把下一个号段加载到内存中\n                            if (!buffer.isNextReady() && (segment.getIdle() < 0.9 * segment.getStep()) && buffer.getThreadRunning().compareAndSet(false, true)) {\n                                    service.execute(new Runnable() {\n                                            @Override\n                                            public void run() {\n                                                    Segment next = buffer.getSegments()[buffer.nextPos()];\n                                                    boolean updateOk = false;\n                                                    try {\n                                                            updateSegmentFromDb(buffer.getKey(), next);\n                                                            updateOk = true;\n                                                            logger.info("update segment {} from db {}", buffer.getKey(), next);\n                                                    } catch (Exception e) {\n                                                            logger.warn(buffer.getKey() + " updateSegmentFromDb exception", e);\n                                                    } finally {\n                                                            if (updateOk) {\n                                                                    buffer.wLock().lock();\n                                                                    buffer.setNextReady(true);\n                                                                    buffer.getThreadRunning().set(false);\n                                                                    buffer.wLock().unlock();\n                                                            } else {\n                                                                    buffer.getThreadRunning().set(false);\n                                                            }\n                                                    }\n                                            }\n                                    });\n                            }\n                            long value = segment.getValue().getAndIncrement();\n                            if (value < segment.getMax()) {\n                                    return new Result(value, Status.SUCCESS);\n                            }\n                    } finally {\n                            buffer.rLock().unlock();\n                    }\n                    waitAndSleep(buffer);\n                    buffer.wLock().lock();\n                    try {\n                            final Segment segment = buffer.getCurrent();\n                            long value = segment.getValue().getAndIncrement();\n                            if (value < segment.getMax()) {\n                                    return new Result(value, Status.SUCCESS);\n                            }\n                            if (buffer.isNextReady()) {\n                                    buffer.switchPos();\n                                    buffer.setNextReady(false);\n                            } else {\n                                    logger.error("Both two segments in {} are not ready!", buffer);\n                                    return new Result(EXCEPTION_ID_TWO_SEGMENTS_ARE_NULL, Status.EXCEPTION);\n                            }\n                    } finally {\n                            buffer.wLock().unlock();\n                    }\n            }\n    }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br"),e("span",{staticClass:"line-number"},[n._v("82")]),e("br"),e("span",{staticClass:"line-number"},[n._v("83")]),e("br"),e("span",{staticClass:"line-number"},[n._v("84")]),e("br"),e("span",{staticClass:"line-number"},[n._v("85")]),e("br"),e("span",{staticClass:"line-number"},[n._v("86")]),e("br"),e("span",{staticClass:"line-number"},[n._v("87")]),e("br"),e("span",{staticClass:"line-number"},[n._v("88")]),e("br"),e("span",{staticClass:"line-number"},[n._v("89")]),e("br"),e("span",{staticClass:"line-number"},[n._v("90")]),e("br"),e("span",{staticClass:"line-number"},[n._v("91")]),e("br"),e("span",{staticClass:"line-number"},[n._v("92")]),e("br"),e("span",{staticClass:"line-number"},[n._v("93")]),e("br"),e("span",{staticClass:"line-number"},[n._v("94")]),e("br"),e("span",{staticClass:"line-number"},[n._v("95")]),e("br"),e("span",{staticClass:"line-number"},[n._v("96")]),e("br")])]),e("p",[n._v("雪花算法：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//LeafController.class\n@RequestMapping(value = "/api/snowflake/get/{key}")\npublic String getSnowflakeId(@PathVariable("key") String key) {\n        return get(key, snowflakeService.getId(key));\n}\n\n//SnowflakeIDGenImpl.class\npublic synchronized Result get(String key) {\n        long timestamp = timeGen();\n        // 当前时间小于上次用的时间戳\n        if (timestamp < lastTimestamp) {\n            long offset = lastTimestamp - timestamp;\n            if (offset <= 5) {\n                try {\n                    // 时间偏差大小如果小于5ms，则等待两倍时间\n                    wait(offset << 1);\n                    // 重新获取时间戳\n                    timestamp = timeGen();\n                    if (timestamp < lastTimestamp) {\n                        return new Result(-1, Status.EXCEPTION);\n                    }\n                } catch (InterruptedException e) {\n                    LOGGER.error("wait interrupted");\n                    return new Result(-2, Status.EXCEPTION);\n                }\n            } else {\n                return new Result(-3, Status.EXCEPTION);\n            }\n        }\n        // 当前时间 = 上次的时间戳\n        if (lastTimestamp == timestamp) {\n            sequence = (sequence + 1) & sequenceMask;\n            if (sequence == 0) {\n                //seq 为0的时候表示是下一毫秒时间开始对seq做随机\n                sequence = RANDOM.nextInt(100);\n                timestamp = tilNextMillis(lastTimestamp);\n            }\n        } else {\n            //如果是新的ms开始\n            sequence = RANDOM.nextInt(100);\n        }\n        lastTimestamp = timestamp;\n        long id = ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n        return new Result(id, Status.SUCCESS);\n\n    }\n\n    protected long tilNextMillis(long lastTimestamp) {\n        long timestamp = timeGen();\n        while (timestamp <= lastTimestamp) {\n            timestamp = timeGen();\n        }\n        return timestamp;\n    }\n\n    protected long timeGen() {\n        return System.currentTimeMillis();\n    }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br")])]),e("h3",{attrs:{id:"_7-uid-generator-百度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-uid-generator-百度"}},[n._v("#")]),n._v(" 7.uid-generator（百度）")]),n._v(" "),e("p",[n._v('【文档】\nhttps://github.com/baidu/uid-generator/blob/master/README.zh_cn.md\n【组成】\n● sign(1bit)\n● 固定1bit符号标识，即生成的UID为正数。\n● delta seconds (28 bits)\n● 当前时间，相对于时间基点"2016-05-20"的增量值，单位：秒，最多可支持约8.7年\n● worker id (22 bits)\n● 机器id，最多可支持约420w次机器启动。内置实现为在启动时由数据库分配，默认分配策略为用后即弃，后续可提供复用策略。\n● sequence (13 bits)\n● 每秒下的并发序列，13 bits可支持每秒8192个并发。\n以上参数均可通过Spring进行自定义')]),n._v(" "),e("h3",{attrs:{id:"_8-tinyid-滴滴"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-tinyid-滴滴"}},[n._v("#")]),n._v(" 8.Tinyid（滴滴）")]),n._v(" "),e("p",[n._v("Tinyid扩展了leaf-segment算法，支持了多db(master)，同时提供了java-client(sdk)使id生成本地化。\n【优点】")]),n._v(" "),e("ol",[e("li",[n._v("提供http和java client方式接入")]),n._v(" "),e("li",[n._v("支持批量获取id")]),n._v(" "),e("li",[n._v("支持生成1,3,5,7,9...序列的id（其实就是for循环获取）")]),n._v(" "),e("li",[n._v("支持多个db的配置，无单点\n"),e("img",{attrs:{src:"https://static.yximgs.com/udata/pkg/EE-KSTACK/9648430cb5b8e15da695636361694758.png",alt:"file"}})])]),n._v(" "),e("h3",{attrs:{id:"结语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[n._v("#")]),n._v(" 结语")]),n._v(" "),e("p",[n._v("对比了几种分布式id的方案，个人认为美团的实现方案是比较完善的，它对业界比较流行的两种方案（号段模式和雪花算法）均有改进，且百度、滴滴的方案均基于它来实现。")]),n._v(" "),e("p",[n._v("如果想要更简便的方式，UUID、UUID转Long、Redis自增方案是不错的选择，可以按各自的优缺点去选择方案。因为没有最优，只有最合适业务的方案。")]),n._v(" "),e("p",[n._v("参考：\n"),e("a",{attrs:{href:"https://tech.meituan.com/2017/04/21/mt-leaf.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Leaf——美团点评分布式ID生成系统"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=t.exports}}]);